stages:
  - prepare
  - test
  - deploy
  - release

variables:
  SECURE_LOG_LEVEL: debug

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
sast:
  needs: []
dependency_scanning:
  needs: []

sync poetry:
  stage: prepare
  image: musicscience37/clang-ci:clang16
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.11
    - poetry install
  cache:
    key:
      prefix: poetry-linux
      files:
        - Poetry.lock
    paths:
      - .venv
  artifacts:
    paths:
      - .venv
    expire_in: "1 mos"

line count:
  stage: prepare
  dependencies: []
  image: registry.gitlab.com/musicscience37projects/docker/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc ./include
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"

pre-commit:
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang16
  script:
    - poetry run pre-commit run --all-files

test release:
  needs: []
  dependencies: []
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 17
      - COMPILER_TYPE: ["clang16", "clang15"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 17
      - COMPILER_TYPE: ["clang16"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 20
  image: ${IMAGE_PATH}:${COMPILER_TYPE}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_TYPE: Release
    BUILD_DIR: build_${COMPILER_TYPE}_release
    VCPKG_DEFAULT_BINARY_CACHE: ${CI_PROJECT_DIR}/.vcpkg-cache
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_COMPILERCHECK: content
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends curl zip unzip tar
    - mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
    - ./vcpkg/bootstrap-vcpkg.sh
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_ENABLE_BENCH=ON
      -DHASH_TABLES_TEST_BENCHMARKS=ON
      -DHASH_TABLES_ENABLE_HEAVY_BENCH=OFF
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_TEST_EXAMPLES=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DHASH_TABLES_ENABLE_CCACHE:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cmake --build .
    - ctest -V
  cache:
    key:
      prefix: vcpkg-${CI_JOB_NAME}
      files:
        - vcpkg-configuration.json
    paths:
      - .vcpkg-cache
      - .ccache
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

test debug:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 17
      - COMPILER_TYPE: ["clang16"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 17
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_${COMPILER_TYPE}_debug
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_TEST_EXAMPLES=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DHASH_TABLES_ENABLE_CCACHE:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cmake --build .
    - ctest -V

clang coverage:
  extends: test debug
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  parallel:
    matrix:
      - COMPILER_TYPE: "clang16"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 17
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DHASH_TABLES_ENABLE_INTEG_TESTS:BOOL=OFF
      -DHASH_TABLES_ENABLE_CCACHE:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - poetry run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

clang-16-asan-ubsan:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang16"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 17
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: alloc_dealloc_mismatch=0
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_CXX_FLAGS=-stdlib=libc++
      -DCMAKE_C_FLAGS=-stdlib=libc++
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DHASH_TABLES_ENABLE_CCACHE:BOOL=ON
      -DHASH_TABLES_ENABLE_AUSAN:BOOL=ON
    - cmake --build .
    - ctest -V

msvc-release:
  tags:
    - saas-windows-medium-amd64
  stage: test
  needs: []
  dependencies: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_DIR: build_msvc_release
    VCPKG_DEFAULT_BINARY_CACHE: ${CI_PROJECT_DIR}/.vcpkg-cache
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_COMPILERCHECK: content
  before_script:
    - New-Item -ItemType Directory -Force -Path $VCPKG_DEFAULT_BINARY_CACHE
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install ccache -y
    - .\vcpkg\bootstrap-vcpkg.bat
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmd.exe /C ..\scripts\ci_win.cmd
  cache:
    - key:
        prefix: vcpkg-${CI_JOB_NAME}
        files:
          - vcpkg-configuration.json
      paths:
        - .vcpkg-cache
    - key: ccache-${CI_JOB_NAME}
      paths:
        - .ccache
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

static analysis:
  extends: test debug
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  parallel:
    matrix:
      - COMPILER_TYPE: "clang16"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 17
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_static_analysis
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_CXX_FLAGS=-stdlib=libc++
      -DCMAKE_C_FLAGS=-stdlib=libc++
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_ENABLE_BENCH=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_ENABLE_CPP_WARNINGS:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cd ..
    - poetry run clang-tidy-checker -b ${BUILD_DIR}

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
      --exclude "**/*.approved.*"
  interruptible: true

doc:
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/sphinx-doxygen:clang16
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_DIR: build_doc
    VCPKG_DEFAULT_BINARY_CACHE: ${CI_PROJECT_DIR}/.vcpkg-cache
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends curl zip unzip tar
    - mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
    - ./vcpkg/bootstrap-vcpkg.sh
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DHASH_TABLES_BUILD_DOC:BOOL=ON
    - cmake --build . --target hash_tables_doc
  cache:
    key:
      prefix: vcpkg-${CI_JOB_NAME}
      files:
        - vcpkg-configuration.json
    paths:
      - .vcpkg-cache
  artifacts:
    paths:
      - $BUILD_DIR/doc
    when: always
    expire_in: "3 mos"

pages:
  stage: deploy
  only:
    - main
  needs:
    - doc
  dependencies:
    - doc
  script:
    - rm -rf public
    - mv build_doc/doc/html public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/change_log/${CI_COMMIT_TAG}.md"
