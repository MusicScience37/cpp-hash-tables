stages:
  - Prepare
  - Check
  - Test with Clang
  - Test with GCC
  - Test with MSVC
  - Build Documentation
  - Publish

variables:
  HASH_TABLES_VERSION: "0.0.0"
  CONAN_USER: "MusicScience37+cpp-hash-tables"
  SECURE_LOG_LEVEL: debug

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
sast:
  stage: Check
  needs: []
dependency_scanning:
  stage: Check
  needs:
    - prepare lock files
  dependencies:
    - prepare lock files
license_scanning:
  stage: Check
  needs:
    - prepare lock files
  dependencies:
    - prepare lock files

.retry setting:
  retry:
    max: 2
    when: runner_system_failure

sync pipenv:
  extends: .retry setting
  stage: Prepare
  image: musicscience37/clang-ci:clang14-v4.3
  script:
    - mkdir -p .venv
    - pipenv sync --dev
  cache:
    key:
      prefix: pipenv-linux
      files:
        - Pipfile.lock
    paths:
      - .venv
  artifacts:
    paths:
      - .venv
    expire_in: "1 mos"

prepare lock files:
  extends: .retry setting
  stage: Prepare
  needs: []
  image: musicscience37/clang-ci:clang14-v4.3
  script:
    - pipenv sync --dev
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Debug .
  cache:
    key:
      prefix: pipenv-linux-prepare
      files:
        - Pipfile.lock
    paths:
      - .venv
  artifacts:
    paths:
      - conan.lock
    expire_in: "1 mos"

line count:
  extends: .retry setting
  stage: Prepare
  dependencies: []
  image: registry.gitlab.com/musicscience37_ci/cloc-docker:v1-5
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc ./include
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"

pre-commit:
  stage: Check
  needs:
    - sync pipenv
  dependencies:
    - sync pipenv
  image: musicscience37/clang-ci:clang14-v4.3
  script:
    - pipenv run pre-commit run --all-files

# TODO
.static analysis:
  extends: .retry setting
  stage: Check
  needs:
    - sync pipenv
  dependencies:
    - sync pipenv
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - apt update
    - apt install -y libstdc++-10-dev
    - pip3 install junit2html
    - mkdir build_static_analysis
    - cd build_static_analysis
    - git clone https://github.com/PSPDFKit-labs/clang-tidy-to-junit.git
    - cd ../
  script:
    - cd build_static_analysis
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libstdc++11 default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True ..
    - cd ../
    - cmake -S ./ -B build_static_analysis
      -DHASH_TABLES_ENABLE_CLANG_TIDY:BOOL=ON
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_ENABLE_BENCH=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_ENABLE_CPP_WARNINGS:BOOL=ON
    - cmake --build build_static_analysis
      --target hash_tables_clang_tidy
    - scripts/check_clang_tidy.sh build_static_analysis/clang_tidy
  after_script:
    - cd build_static_analysis/clang_tidy
    - cat $(find $1 -name '*.txt') |
      python3 ../clang-tidy-to-junit/clang-tidy-to-junit.py $(dirname $(pwd)) > clang_tidy_junit.xml
    - python3 -m junit2htmlreport clang_tidy_junit.xml clang_tidy_junit.html
  artifacts:
    paths:
      - build_static_analysis
    reports:
      junit:
        - build_static_analysis/clang_tidy/clang_tidy_junit.xml
    when: always
    expire_in: "3 mos"

.release-test-base:
  extends: .retry setting
  needs:
    - sync pipenv
  dependencies:
    - sync pipenv
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libstdc++11 default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Release ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Release
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_ENABLE_BENCH=ON
      -DHASH_TABLES_TEST_BENCHMARKS=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_TEST_EXAMPLES=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
  artifacts:
    paths:
      - $BUILD_DIR
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

.debug-test-base:
  extends: .release-test-base
  before_script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libstdc++11 default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Debug ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_TEST_EXAMPLES=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

.clang-release-test-base:
  extends: .release-test-base
  before_script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Release ..
    - cd ../

.clang-debug-test-base:
  extends: .release-test-base
  before_script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Debug ..
    - cd ../

# TODO
.clang coverage:
  extends: .clang-debug-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

# TODO
.gcc coverage:
  extends: .debug-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v4.1
  variables:
    BUILD_DIR: build_gcc_coverage
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=--coverage"
      "-DCMAKE_MODULE_LINKER_FLAGS=--coverage"
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_gcc_coverage.sh build_gcc_coverage
  coverage: '/Total:\|\s*(\d+\.?\d+?)%/'

# TODO
.gcc-10-debug:
  extends: .debug-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v4.1
  variables:
    BUILD_DIR: build_gcc10_debug

# TODO
.gcc-10-release:
  extends: .release-test-base
  stage: Test with GCC
  image: musicscience37/gcc-ci:gcc10-v4.1
  variables:
    BUILD_DIR: build_gcc10_release

# TODO
.clang-14-debug:
  extends: .clang-debug-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    BUILD_DIR: build_clang12_debug

# TODO
.clang-14-release:
  extends: .clang-release-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    BUILD_DIR: build_clang12_release

# TODO
.clang-14-asan-ubsan:
  extends: .clang-debug-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: alloc_dealloc_mismatch=0
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DHASH_TABLES_ENABLE_AUSAN:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

# TODO
.clang-14-tsan:
  extends: .clang-debug-test-base
  stage: Test with Clang
  image: musicscience37/clang-ci:clang14-v4.3
  variables:
    BUILD_DIR: build_clang_tsan
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_FLAGS=-fsanitize=thread
      -DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=thread
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

# TODO
.msvc-release:
  extends: .release-test-base
  tags:
    - shared-windows
    - windows
    - windows-1809
  stage: Test with MSVC
  needs: []
  dependencies: []
  variables:
    BUILD_DIR: build_msvc
  before_script:
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python --version=3.9.12 -y
    - RefreshEnv
    - pip install pipenv
    - pipenv sync
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - pipenv run conan profile new --detect default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True -s build_type=Release ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Release
      -DHASH_TABLES_TESTING:BOOL=ON
      -DHASH_TABLES_ENABLE_BENCH=ON
      -DHASH_TABLES_TEST_BENCHMARKS=ON
      -DHASH_TABLES_BUILD_EXAMPLES=ON
      -DHASH_TABLES_TEST_EXAMPLES=ON
      -DHASH_TABLES_WRITE_JUNIT:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build . --config Release --parallel
    - ctest -V --build-config Release
  retry:
    max: 2
    when: always

doc:
  extends: .retry setting
  stage: Build Documentation
  needs:
    - sync pipenv
  dependencies:
    - sync pipenv
  image: musicscience37/sphinx-doxygen:clang14-v4.3
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir build_doc
    - cd build_doc
    - pipenv run conan profile new --detect default
    - pipenv run conan profile update settings.compiler.libcxx=libc++ default
    - pipenv run conan remote add gitlab https://gitlab.com/api/v4/packages/conan
    - pipenv run conan install --build missing -o cpp-hash-tables:requirements_for_tests=True ..
    - cd ../
    - cmake -S ./ -B build_doc
      -DHASH_TABLES_BUILD_DOC:BOOL=ON
    - cmake --build build_doc --target hash_tables_doc
  artifacts:
    paths:
      - build_doc
    when: always
    expire_in: "3 mos"

pages:
  extends: .retry setting
  stage: Publish
  only:
    - develop
  needs:
    - doc
  dependencies:
    - doc
  script:
    - rm -rf public
    - mv build_doc/doc/html public
  artifacts:
    paths:
      - public
