@startuml FullHashTable

class hash_table<ValueType, KeyType, \nHash, KeyEqual, \nAllocator, RehashPolicy> {
    .. types ..
    + using value_type = ValueType
    + using key_type = KeyType
    + using hash_type = Hash
    + using key_equal_type = KeyEqual
    + using allocator_type = Allocator
    + using rehash_policy = RehashPolicy
    + uisng size_type = std::size_t
    ------
    .. common private members ..
    - hash_ : hash_type
    - key_equal_ : key_equal_type
    - allocator_ : allocator_type
    - size_ : size_type
    ------
    .. constructor ..
    + hash_table()
    .. access to basic information ..
    + hash() : hash_type
    + key_equal() : key_equal_type
    + allocator() : allocator_type
    + size() : size_type
    + empty() : bool
    + max_size() : size_type
    .. create / update values ..
    + emplace(KeyInput&& key, Args&& ... args) : bool
    + emplace_or_assign(KeyInput&& key, Args&& ... args) : bool
    + assign(const key_type& key, Args&& ... args) : bool
    .. read values ..
    + at(const key_type& key) : object_type
    + operator[](const key_type& key) : object_type
    + has(const key_type& key) : bool
    + for_all(const Function& function) : void
    .. delete values ..
    + clear() : void
    + erase(const key_type& key) : bool
    + erase_if(const Function& function) : void
    .. functions related to internal data ..
    + reserve(size_t size) : void
    + rehash(<implementation-defined-arguments>) : void
    + load_factor() : float
    + max_load_factor() : float
    + max_load_factor(float value) : void
}

@enduml
